import { pgTable, integer, serial, numeric, text } from "drizzle-orm/pg-core"
import { patient } from "../patients/schema"

export const raynaudData = pgTable("raynaudData", {
    id: serial("id").primaryKey(),
    patientId: integer("patientId")
        .references(() => patient.id)
        .notNull(),

    affectedSide: integer("affectedSide"),
    comorbidities: integer("comorbidities"),
    psychologicalDisorder: integer("psychologicalDisorder"),
    smoking: integer("smoking"),
    autoimmuneDzSince: text("autoimmuneDzSince"),
    raynaudSince: text("raynaudSince"),
    yearsFromAutoimmuneToOp: integer("timeFromAutoimmuneToOp"),
    yearsFromRaynaudToOp: integer("yearsFromRaynaudToOp"),
    pastIntervention: integer("pastIntervention"),
    oralVasodilatorTreatment: integer("oralVasodilatorTreatment"),
    seasonal: integer("seasonal"),

    surgeryDate: text("surgeryDate"),
    nailfoldCapillaryMicroscopy: integer("nailfoldCapillaryMicroscopy"),
    nerveOfHenleDistanceToPisiform: numeric("nerveOfHenleDistanceToPisiform"),
    icgIngressBGPreOp: numeric("icgIngressBGPreOp"),
    icgIngressBGPostOp: numeric("icgIngressBGPostOp"),
    icgIngressRateBGPreOp: numeric("icgIngressRateBGPreOp"),
    icgIngressRateBGPostOp: numeric("icgIngressRateBGPostOp"),
    icgIngressImprovementBG: numeric("icgIngressImprovementBG"),
    icgIngressRateImprovementBG: numeric("icgIngressRateImprovementBG"),
    icgEgressBGPreOp: numeric("icgEgressBGPreOp"),
    icgEgressBGPostOp: numeric("icgEgressBGPostOp"),
    icgEgressRateBGPreOp: numeric("icgEgressRateBGPreOp"),
    icgEgressRateBGPostOp: numeric("icgEgressRateBGPostOp"),
    icgEgressImprovementBG: numeric("icgEgressImprovementBG"),
    icgEgressRateImprovementBG: numeric("icgEgressRateImprovementBG"),
    icgIngressBrightestAreaPreOp: numeric("icgIngressBrightestAreaPreOp"),
    icgIngressBrightestAreaPostOp: numeric("icgIngressBrightestAreaPostOp"),
    icgIngressRateBrightestAreaPreOp: numeric(
        "icgIngressRateBrightestAreaPreOp",
    ),
    icgIngressRateBrightestAreaPostOp: numeric(
        "icgIngressRateBrightestAreaPostOp",
    ),
    icgIngressImprovementBrightestArea: numeric(
        "icgIngressImprovementBrightestArea",
    ),
    icgIngressRateImprovementBrightestArea: numeric(
        "icgIngressRateImprovementBrightestArea",
    ),
    icgEgressBrightestAreaPreOp: numeric("icgEgressBrightestAreaPreOp"),
    icgEgressBrightestAreaPostOp: numeric("icgEgressBrightestAreaPostOp"),
    icgEgressRateBrightestAreaPreOp: numeric("icgEgressRateBrightestAreaPreOp"),
    icgEgressRateBrightestAreaPostOp: numeric(
        "icgEgressRateBrightestAreaPostOp",
    ),
    icgEgressImprovementBrightestArea: numeric(
        "icgEgressImprovementBrightestArea",
    ),
    icgEgressRateImprovementBrightestArea: numeric(
        "icgEgressRateImprovementBrightestArea",
    ),
    finger2ICGIngressPreOp: numeric("finger2ICGIngressPreOp"),
    finger2ICGIngressPostOp: numeric("finger2ICGIngressPostOp"),
    finger2ICGIngressRatePreOp: numeric("finger2ICGIngressRatePreOp"),
    finger2ICGIngressRatePostOp: numeric("finger2ICGIngressRatePostOp"),
    finger2ICGIngressImprovement: numeric("finger2ICGIngressImprovement"),
    finger2ICGIngressRateImprovement: numeric(
        "finger2ICGIngressRateImprovement",
    ),
    finger2ICGEgressPreOp: numeric("finger2ICGEgressPreOp"),
    finger2ICGEgressPostOp: numeric("finger2ICGEgressPostOp"),
    finger2ICGEgressRatePreOp: numeric("finger2ICGEgressRatePreOp"),
    finger2ICGEgressRatePostOp: numeric("finger2ICGEgressRatePostOp"),
    finger2ICGEgressImprovement: numeric("finger2ICGEgressImprovement"),
    finger2ICGEgressRateImprovement: numeric("finger2ICGEgressRateImprovement"),
    finger3ICGIngressPreOp: numeric("finger3ICGIngressPreOp"),
    finger3ICGIngressPostOp: numeric("finger3ICGIngressPostOp"),
    finger3ICGIngressRatePreOp: numeric("finger3ICGIngressRatePreOp"),
    finger3ICGIngressRatePostOp: numeric("finger3ICGIngressRatePostOp"),
    finger3ICGIngressImprovement: numeric("finger3ICGIngressImprovement"),
    finger3ICGIngressRateImprovement: numeric(
        "finger3ICGIngressRateImprovement",
    ),
    finger3ICGEgressPreOp: numeric("finger3ICGEgressPreOp"),
    finger3ICGEgressPostOp: numeric("finger3ICGEgressPostOp"),
    finger3ICGEgressRatePreOp: numeric("finger3ICGEgressRatePreOp"),
    finger3ICGEgressRatePostOp: numeric("finger3ICGEgressRatePostOp"),
    finger3ICGEgressImprovement: numeric("finger3ICGEgressImprovement"),
    finger3ICGEgressRateImprovement: numeric("finger3ICGEgressRateImprovement"),
    finger4ICGIngressPreOp: numeric("finger4ICGIngressPreOp"),
    finger4ICGIngressPostOp: numeric("finger4ICGIngressPostOp"),
    finger4ICGIngressRatePreOp: numeric("finger4ICGIngressRatePreOp"),
    finger4ICGIngressRatePostOp: numeric("finger4ICGIngressRatePostOp"),
    finger4ICGIngressImprovement: numeric("finger4ICGIngressImprovement"),
    finger4ICGIngressRateImprovement: numeric(
        "finger4ICGIngressRateImprovement",
    ),
    finger4ICGEgressPreOp: numeric("finger4ICGEgressPreOp"),
    finger4ICGEgressPostOp: numeric("finger4ICGEgressPostOp"),
    finger4ICGEgressRatePreOp: numeric("finger4ICGEgressRatePreOp"),
    finger4ICGEgressRatePostOp: numeric("finger4ICGEgressRatePostOp"),
    finger4ICGEgressImprovement: numeric("finger4ICGEgressImprovement"),
    finger4ICGEgressRateImprovement: numeric("finger4ICGEgressRateImprovement"),

    postOPYear: integer("postOPYear"),
    discoloration: integer("discoloration"),
    numbness: integer("numbness"),
    pain: integer("pain"),
    digitalUlcerationPresence: integer("digitalUlcerationPresence"),
    digitalUlcerationNumbers: integer("digitalUlcerationNumbers"),
    attackFrequency: integer("attackFrequency"),
    digitalSkinTemperature: numeric("digitalSkinTemperature"),
    digitalSkinBloodFlow: numeric("digitalSkinBloodFlow"),
    MHOOverallR: numeric("MHOOverallR"),
    MHOOverallL: numeric("MHOOverallL"),
    MHOActivitiesROH: numeric("MHOActivitiesROH"),
    MHOActivitiesROverall: numeric("MHOActivitiesROverall"),
    MHOActivitiesLOH: numeric("MHOActivitiesLOH"),
    MHOActivitiesLOverall: numeric("MHOActivitiesLOverall"),
    MHOActivitiesTH: numeric("MHOActivitiesTH"),
    MHOWork: numeric("MHOWork"),
    MHOPain: numeric("MHOPain"),
    MHOAestheticsR: numeric("MHOAestheticsR"),
    MHOAestheticsL: numeric("MHOAestheticsL"),
    MHOSatisfactionR: numeric("MHOSatisfactionR"),
    MHOSatisfactionL: numeric("MHOSatisfactionL"),
    SF36PhyFunc: numeric("SF36PhyFunc"),
    SF36RolePhy: numeric("SF36RolePhy"),
    SF36BodyPain: numeric("SF36BodyPain"),
    SF36GenHealth: numeric("SF36GenHealth"),
    SF36Vitality: numeric("SF36Vitality"),
    SF36SocialFunc: numeric("SF36SocialFunc"),
    SF36RoleEmotion: numeric("SF36RoleEmotion"),
    SF36MentalHealth: numeric("SF36MentalHealth"),
})

export const AINData = pgTable("AINData", {
    id: serial("id").primaryKey(),
    patientId: integer("patientId")
        .references(() => patient.id)
        .notNull(),
    postOPMonth: integer("postOPMonth"),
    group: integer("group"),
    palsySide: text("palsySide"),
    admCMAP: numeric("aDMcMAP"),
    fdiCMAP: numeric("fDIcMAP"),
    SNAP: numeric("SNAP"),
    postMed: numeric("postMed"),
    "2PDSmall": numeric("2PDSmall"),
    "2PDRing": numeric("2PDRing"),
    "2PDNormal": numeric("2PDNormal"),
    gripIH: numeric("gripIH"),
    pinchIH: numeric("pinchIH"),
    fdi: numeric("fdi"),
    digAbd: numeric("digAbd"),
    raAdd: numeric("raAdd"),
    uiAdd: numeric("uiAdd"),
    froment: integer("froment"),
    clawing: integer("clawing"),
    wart: integer("wart"),
    intPlus: integer("intPlus"),
    bsrs: numeric("bsrs"),
    sf36: numeric("sf36"),
    dash: numeric("dash"),
})
